                      Multithreading in C++ Assignment

1. Write a C++ program to print the thread_id.
#include <iostream>
#include <thread>

void print_thread_id() {
    std::thread::id thread_id = std::this_thread::get_id();
    std::cout << "Thread ID: " << thread_id << std::endl;
}

int main() {
    std::thread t1(print_thread_id);
    std::thread::id main_thread_id = std::this_thread::get_id();
    std::cout << "Main Thread ID: " << main_thread_id << std::endl;
    t1.join();
    return 0;
}
Output:
Main Thread ID: 140722813571776
Thread ID: 140722813571776 

2.Write a C++ program to create 2 threads and make the thread to run parallel.
#include <iostream>
#include <thread>

void thread_function1() {
    for (int i = 0; i < 5; i++) {
        std::cout << "Thread 1: " << i << std::endl;
    }
}

void thread_function2() {
    for (int i = 0; i < 5; i++) {
        std::cout << "Thread 2: " << i << std::endl;
    }
}
int main() {
    std::thread t1(thread_function1);
    std::thread t2(thread_function2);
  t1.join();
    t2.join();
 return 0;
}
Output:

Thread 1: 0
Thread 2: 0
Thread 1: 1
Thread 2: 1
Thread 1: 2
Thread 2: 2
Thread 1: 3
Thread 2: 3
Thread 1: 4
Thread 2: 4

3.Write a C++ program to illustrate thread and passing the arguments to the function. 
#include <iostream>
#include <thread>

void print_message(const std::string& message, int count) {
    for (int i = 0; i < count; i++) {
        std::cout << message << std::endl;
    }
}

int main() {
    std::string message = "Hello, threads!";
    int count = 5;

    std::thread t1(print_message, message, count);
    std::thread t2(print_message, "Goodbye, threads!", 3);

    t1.join();
    t2.join();

    return 0;
}
Output : 
Hello, threads!
Hello, threads!
Hello, threads!
Hello, threads!
Hello, threads!
Goodbye, threads!
Goodbye, threads!
Goodbye, threads!

4.Write a C++ program to illustrate RACE CONDITION AND MUTEX.
#include <iostream>
#include <thread>
#include <mutex>

std::mutex mtx; // mutex for critical section
int shared_variable = 0; // shared resource

void increment_variable() {
    for (int i = 0; i < 100000; i++) {
        std::lock_guard<std::mutex> lock(mtx); // acquire mutex
        shared_variable++; // critical section
    } // release mutex
}

int main() {
    std::thread t1(increment_variable);
    std::thread t2(increment_variable);

    t1.join();
    t2.join();

    std::cout << "Final value: " << shared_variable << std::endl;

    return 0;
}
Output:
Final value: 200000

5. Write a note on lock_guard and unique_lock.
Lock Guard (lock_guard)

a- Automatically acquires and releases a mutex
b- Ensures mutex is always released, even in case of exceptions
c- Simple to use, but less flexible

Unique Lock (unique_lock)
a- Provides more control over locking and unlocking
b- Allows try-locking, timed locking, and deferred locking
c- More flexible, but slightly more complex to use
